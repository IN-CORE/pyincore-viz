name: CI

on:
  push:
    branches:
      - master
      - develop

    tags:
      - '*'

  pull_request:

env:
  MAIN_REPO: IN-CORE/pyincore-viz

jobs:
  #-----------------------------------------------------------------------
  # UNIT TEST
  # ----------------------------------------------------------------------
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          $CONDA/bin/conda env update --file environment.yaml --name base
      - name: Run tests with pytest
        run: |
          echo "${{secrets.PYTEST_USER_TOKEN}}" > tests/pyincore_viz/.incorepw
          $CONDA/bin/pytest tests/pyincore_viz/test_pyincore_viz.py --exitfirst --verbose
          --failed-first --cov=. --cov-report html

  # ----------------------------------------------------------------------
  # DOCKER BUILD
  # ----------------------------------------------------------------------
#  docker:
#    runs-on: ubuntu-latest
#
#    steps:
#      # checkout source code
#      - uses: actions/checkout@v2
#
#      # calculate some variables that are used later
#      - name: version information
#        run: |
#          if [ "${{ github.event.release.target_commitish }}" != "" ]; then
#            BRANCH="${{ github.event.release.target_commitish }}"
#          elif [[ $GITHUB_REF =~ pull ]]; then
#            BRANCH="$(echo $GITHUB_REF | sed 's#refs/pull/\([0-9]*\)/merge#PR-\1#')"
#          else
#            BRANCH=${GITHUB_REF##*/}
#          fi
#          echo "GITHUB_BRANCH=${BRANCH}" >> $GITHUB_ENV
#          if [ "$BRANCH" == "master" ]; then
#            version=$(cat package.json | grep \"version\" | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,",]//g' | tr -d '[[:space:]]')
#            tags="latest"
#            oldversion=""
#            while [ "${oldversion}" != "${version}" ]; do
#              oldversion="${version}"
#              tags="${tags},${version}"
#              version=${version%.*}
#            done
#            echo "VERSION=${version}" >> $GITHUB_ENV
#            echo "TAGS=${tags}" >> $GITHUB_ENV
#          elif [ "$BRANCH" == "develop" ]; then
#            echo "VERSION=develop" >> $GITHUB_ENV
#            echo "TAGS=develop" >> $GITHUB_ENV
#          else
#            echo "VERSION=testing" >> $GITHUB_ENV
#            echo "TAGS=${BRANCH}" >> $GITHUB_ENV
#          fi
#
#      # build image
#      - name: Build image
#        uses: elgohr/Publish-Docker-Github-Action@3.04
#        env:
#          BRANCH: ${{ env.GITHUB_BRANCH }}
#          VERSION: ${{ env.VERSION }}
#          BUILDNUMBER: ${{ github.run_number }}
#          GITSHA1: ${{ github.sha }}
#        with:
#          registry: hub.ncsa.illinois.edu
#          name: incore/doc/pyincore-viz
#          #username: ${{ secrets.HUB_USERNAME }}
#          #password: ${{ secrets.HUB_PASSWORD }}
#          tags: "${{ env.TAGS }}"
#          buildargs: BRANCH,VERSION,BUILDNUMBER,GITSHA1
#          no_push: true
#
#      # this will publish to NCSA
#      - name: Publish to NCSA Hub
#        #if: github.event_name != 'pull_request' && github.repository == env.MAIN_REPO
#        if: github.repository == env.MAIN_REPO
#        uses: elgohr/Publish-Docker-Github-Action@3.04
#        env:
#          BRANCH: ${{ env.GITHUB_BRANCH }}
#          VERSION: ${{ env.VERSION }}
#          BUILDNUMBER: ${{ github.run_number }}
#          GITSHA1: ${{ github.sha  }}
#        with:
#          registry: hub.ncsa.illinois.edu
#          name: incore/doc/pyincore-viz
#          username: ${{ secrets.HUB_USERNAME }}
#          password: ${{ secrets.HUB_PASSWORD }}
#          tags: "${{ env.TAGS }}"
#          buildargs: BRANCH,VERSION,BUILDNUMBER,GITSHA1